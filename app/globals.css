@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
body{
 
  }

h1{
  @apply text-[48px] xl:text-[80px] leading-[1.1] font-semibold;
}

h2{
  @apply text-[36px] xl:text-[48px] leading-[1.1] font-semibold;
}

h3{
  @apply text-[20px] xl:text-[24px] leading-[1.1] font-semibold;
}

.hero-bg{
  @apply font-primary bg-gradient-to-b from-[#33b8bd] via-[#0e53d3] to-[#1e3c72] text-white leading-loose;
}

.text-outline{
  -webkit-text-stroke: 1px #ffffff;
}

.text-outline-hover{
  -webkit-text-stroke: 1px #90E0EF;
}

input::placeholder,
textarea::placeholder {
  color: #6b7280; /* This will set the placeholder color to gray */
}

}

@keyframes waveSplash {
  0% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 0;
  }
  100% {
    transform: translate(-50%, -50%) scale(3);
    opacity: 1;
  }
}

.wave-splash {
  @apply relative w-72 h-48 bg-blue-500 rounded-lg overflow-hidden cursor-pointer transition-colors;
}

.wave-splash::before {
  content: '';
  @apply absolute inset-1/2 w-full h-full bg-white opacity-0 rounded-full;
  transform: translate(-50%, -50%);
  animation: waveSplash 0.4s ease-out forwards;
}

.wave-splash:hover {
  @apply bg-blue-700;
}

.wave-splash:hover::before {
  animation: waveSplash 0.4s ease-out forwards;
}

/* Keyframes should also be in a global file */
@keyframes waveSplash {
  0% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 0;
  }
  100% {
    transform: translate(-50%, -50%) scale(3);
    opacity: 1;
  }
}

@keyframes intensePulse {
  0% {
    box-shadow: 0 0 15px rgba(0, 0, 139, 0.5); /* Darker blue */
    transform: scale(1);
  }
  50% {
    box-shadow: 0 0 40px rgba(0, 0, 139, 1); /* Darker blue */
    transform: scale(1.1);
  }
  100% {
    box-shadow: 0 0 15px rgba(0, 0, 139, 0.5); /* Darker blue */
    transform: scale(1);
  }
}

.new-container{
  width: 100%;
  @media (width >= 40rem /* 640px */) {
      max-width: 40rem /* 640px */;
  }
  @media (width >= 48rem /* 768px */) {
      max-width: 48rem /* 768px */;
  }
  @media (width >= 64rem /* 1024px */) {
      max-width: 64rem /* 1024px */;
  }
  @media (width >= 80rem /* 1280px */) {
      max-width: 80rem /* 1280px */;
  }
  @media (width >= 96rem /* 1536px */) {
      max-width: 96rem /* 1536px */;
  }
}

:root {
  --color-primary: #10B981; /* You can use this as a fallback for CSS custom properties */
}

/* Button Styles */
@layer components {
  .button {
    @apply inline-block mt-6 py-2 px-6 text-white font-semibold text-base tracking-wider transition-all duration-300 relative overflow-hidden ;
  }

  .button::after {
    content: '';
    @apply absolute bottom-0 left-0 w-full h-full bg-green-500 ;
    z-index: -2;
  }

  .button::before {
    content: '';
    @apply absolute bottom-0 left-0 h-full bg-green-800 transition-all duration-300;
    width: 0%;
    z-index: -1;
  }

  .button:hover {
    @apply text-white;
  }

  .button:hover::before {
    width: 100%;
  }
}



.parallax-background {
  background-image: url("/images/logs.jpg");
  background-size: cover; /* Ensures the background image fills the section */
  background-position: center center; /* Centers the background image */
  background-attachment: fixed; /* This works on desktop */
  -webkit-backface-visibility: hidden; /* For Safari and Chrome */
  backface-visibility: hidden; /* Standard CSS */
  height: 100%; /* Make sure it takes up the full height of the section */
  width: 100%; /* Make sure it takes up the full width of the section */
}

/* Simulate parallax effect on mobile */
@media (max-width: 1024px) {
  .parallax-background {
    background-attachment: scroll; /* Disable fixed background on mobile */
  }

}

.overlay {
  position: absolute;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.8);
}
